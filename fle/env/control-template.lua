-- control.lua
-- This file is automatically generated by the LuaModuleManager
-- Do not edit this file manually

util = require('util')
local module_names = {{
    -- libs first
    '{lib_names}',

    -- admin tools
    '{admin_tool_names}',

    -- agent tools
    '{agent_tool_names}'
}}

local loaded_modules = {}

-- Load all modules and store them
log("Loading modules")
for _, name in ipairs(module_names) do
    local ok, mod = pcall(require, name)
    if not ok then
        log("Error loading module: " .. name .. " - error: " .. mod)
    else
        log("Loaded module: " .. name .. " - success: " .. tostring(ok))
        loaded_modules[name] = mod  -- Store the actual module object
    end
end

local function initialize_all()
    log("Initializing all modules")
    for name, module in pairs(loaded_modules) do  -- Now iterating over actual modules
        log('Initializing module: ' .. name)
        if module.initialize then 
            local ok, err = pcall(module.initialize)
            if ok then
                log("Successfully initialized module: " .. name)
            else
                log("Error initializing module: " .. name .. " - error: " .. err)
            end
        end
    end
end


local function register_events()
    log("Registering events")
    for name, module in pairs(loaded_modules) do
        if module.events then
            for event_id, handler in pairs(module.events) do
                log('Registering event: ' .. tostring(event_id) .. ' from module: ' .. name)
                script.on_event(event_id, handler)
            end
        end
    end
end

-- First tick handler for delayed initialization
local function on_first_tick(event)
    -- Check if we need to initialize
    if not global.fle_initialized then
        log("Running delayed initialization on first tick")
        initialize_all()
        global.fle_initialized = true
    end
    -- Unregister this handler after first run
    script.on_event(defines.events.on_tick, nil)
    log("First tick initialization complete, on_tick handler removed")
end

script.on_load(function()
    log("Hii from on_load")
    register_events()
    
    -- Only set up first-tick initialization if not already initialized
    -- Note: global table might not be accessible during on_load in some cases,
    -- so we'll register the handler and let it check the condition
    log("Setting up first-tick initialization handler")
    script.on_event(defines.events.on_tick, on_first_tick)
end)

script.on_init(function()
    log("Hii from on_init")
    initialize_all()
    register_events()
    global.fle_initialized = true
end)

script.on_configuration_changed(function()
    log("Hii from on_configuration_changed")
    initialize_all()
    register_events()
    global.fle_initialized = true
end)