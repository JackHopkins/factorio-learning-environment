{
    "name": "buildBasicSteamPowerSystem",
    "objective": "Implement a snippet that builds a basic steam power generation setup by placing and configuring an offshore pump, boiler, and steam engine in sequence, with transport belts and inserters to automatically feed coal from a mining drill to the boiler, creating a self-sustaining power production system.",
    "base_skills": [
        {
            "name": "test_simple_automated_drill",
            "implementation": "# Find nearest coal patch\ncoal_patch = get_resource_patch(Resource.Coal, nearest(Resource.Coal))\nassert coal_patch, \"No coal patch found nearby\"\n\n# Place coal burner mining drill\ndrill_position = coal_patch.bounding_box.center\nmove_to(drill_position)\ndrill = place_entity(Prototype.BurnerMiningDrill, Direction.UP, drill_position)\nassert drill, f\"Failed to place burner mining drill at {drill_position}\"\nprint(f\"Placed burner mining drill at {drill.position}\")\n\n# Place inserter next to the drill\ninserter_position = Position(x=drill.position.x, y=drill.position.y+1)\ninserter = place_entity(Prototype.BurnerInserter, Direction.UP, inserter_position)\nassert inserter, f\"Failed to place inserter at {inserter_position}\"\nprint(f\"Placed inserter at {inserter.position}\")\n\n# Verify inserter is facing the drill\nassert inserter.direction.name == Direction.UP.name, f\"Inserter is not facing the drill. Current direction: {inserter.direction}\"\n\n# Place transport belt connecting drill to inserter\nbelt_start = drill.drop_position\nbelt_end = inserter.pickup_position\nbelts = connect_entities(belt_start, belt_end, Prototype.TransportBelt)\nassert belts, f\"Failed to place transport belt from {belt_start} to {belt_end}\"\nprint(f\"Placed {len(belts)} transport belt(s) from drill to inserter\")\n\n# Verify the setup\nentities = inspect_entities(drill.position, radius=5)\nassert entities.get_entity(Prototype.BurnerMiningDrill), \"Burner mining drill not found in setup\"\nassert entities.get_entity(Prototype.BurnerInserter), \"Inserter not found in setup\"\nassert any(e.name == \"transport-belt\" for e in entities.entities), \"Transport belts not found in setup\"\n\nprint(\"Successfully set up coal mining loop with burner mining drill, inserter, and transport belts\")",
            "description": "Tests automated placement and configuration of a basic coal mining setup in a factory automation system. Verifies correct positioning and connection of a burner mining drill, inserter, and transport belts to create a functional coal extraction loop. Checks that components are properly oriented and connected to enable automated coal mining and transport.",
            "signature": "test_simple_automated_drill(game) -> None:\n    \"\"\"Tests automated placement and configuration of a basic coal mining setup in a factory automation system. Verifies correct positioning and connection of a burner mining drill, inserter, and transport belts to create a functional coal extraction loop. Checks that components are properly oriented and connected to enable automated coal mining and transport.\"\"\"",
            "dependencies": [
                "'stone-furnace': 1",
                "'iron-chest': 3",
                "'burner-inserter': 6",
                "'coal': 50",
                "'transport-belt': 50",
                "'burner-mining-drill': 5"
            ]
        },
        {
            "name": "test_place_boiler_next_to_offshore_pump_rotate_and_connect",
            "implementation": "# move to the nearest water source\nwater_location = nearest(Resource.Water)\nmove_to(water_location)\n\noffshore_pump = place_entity(Prototype.OffshorePump,\n                                  position=water_location)\n# Get offshore pump direction\ndirection = Direction(offshore_pump.direction)\n\n# Get orthogonal direction\nopposite_direction = Direction.opposite(direction)\n\n# pump connection point\npump_connection_point = offshore_pump.connection_points[0]\n\n# place the boiler next to the offshore pump\nboiler = place_entity_next_to(Prototype.Boiler,\n                                   reference_position=offshore_pump.position,\n                                   direction=opposite_direction,\n                                   spacing=2)\n\n# rotate the boiler to face the offshore pump\nboiler = rotate_entity(boiler, Direction.next_clockwise(direction))",
            "description": "Positions and connects water infrastructure by finding nearest water source, placing an offshore pump, then placing and rotating a boiler to properly connect with the pump's water output. Tests basic entity placement and rotation mechanics for setting up a water processing system.",
            "signature": "test_place_boiler_next_to_offshore_pump_rotate_and_connect(game) -> None:\n    \"\"\"Positions and connects water infrastructure by finding nearest water source, placing an offshore pump, then placing and rotating a boiler to properly connect with the pump's water output. Tests basic entity placement and rotation mechanics for setting up a water processing system.\"\"\"",
            "dependencies": [
                "'boiler': 1",
                "'transport-belt': 1",
                "'stone-furnace': 1",
                "'burner-mining-drill': 1",
                "'burner-inserter': 2",
                "'electric-mining-drill': 1",
                "'assembling-machine-1': 1",
                "'steam-engine': 1",
                "'pipe': 1",
                "'offshore-pump': 1"
            ]
        }
    ],
    "inventory": {
        "stone-furnace": 2,
        "iron-chest": 6,
        "burner-inserter": 12,
        "coal": 100,
        "transport-belt": 100,
        "burner-mining-drill": 10,
        "boiler": 2,
        "electric-mining-drill": 2,
        "assembling-machine-1": 2,
        "steam-engine": 2,
        "pipe": 20,
        "offshore-pump": 2
    }
}