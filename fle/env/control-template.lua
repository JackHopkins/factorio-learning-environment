-- control.lua
-- This file is automatically generated by the LuaModuleManager
-- Do not edit this file manually

util = require('util')
utils = {}
actions = {}

local module_names = {
    -- libs first
    '{lib_names}',

    -- admin tools
    '{admin_tool_names}',

    -- agent tools
    '{agent_tool_names}'
}

local loaded_modules = {}

-- Load all modules and store them
log("Loading modules")
for _, name in ipairs(module_names) do
    local ok, mod = pcall(require, name)
    if not ok then
        log("Error loading module: " .. name .. " - error: " .. mod)
    else
        if type(mod) == "table" then
            loaded_modules[name] = mod
            log("Module " .. name .. " loaded successfully")
        else
            log("Module " .. name .. " did not return a table (type: " .. type(mod) .. ") - likely a library/initialization script")
        end
    end
end

local function initialise_modules()
    log("Running module initialisers")
    for name, module in pairs(loaded_modules) do
        if module and module.initialise then
            local ok, err = pcall(module.initialise)
            if not ok then
                log("Error initializing module: " .. name .. " - error: " .. err)
            else
                log("Module " .. name .. " initialised successfully")
            end
        end
    end
end

local function register_events()
    log("Registering events")
    
    -- Table to store multiple handlers per event
    local event_handlers = {}
    local nth_tick_handlers = {}
    
    local function get_event_name(event_id)
        for name, id in pairs(defines.events) do
            if id == event_id then
                return name
            end
        end
        return tostring(event_id)  -- Return the ID as string if name not found
    end
    -- Collect all event handlers from modules
    for name, module in pairs(loaded_modules) do
        if module.events then
            for event_id, handler in pairs(module.events) do
                log('Collecting event: ' .. get_event_name(event_id) .. ' from module: ' .. name)
                if not event_handlers[event_id] then
                    event_handlers[event_id] = {}
                end
                table.insert(event_handlers[event_id], handler)
            end
        end
        if module.nth then
            for nth, handler in pairs(module.nth) do
                log('Collecting nth-tick: ' .. tostring(nth) .. ' from module: ' .. name)
                if not nth_tick_handlers[nth] then
                    nth_tick_handlers[nth] = {}
                end
                table.insert(nth_tick_handlers[nth], handler)
            end
        end
    end
    
    -- Register dispatchers for each collected event
    for event_id, handlers in pairs(event_handlers) do
        log('Registering dispatcher for event: ' .. get_event_name(event_id))
        script.on_event(event_id, function(event)
            -- Call all registered handlers for this event
            for _, handler in pairs(handlers) do
                handler(event)
            end
        end)
    end
    
    -- Register dispatchers for each nth tick interval
    for nth, handlers in pairs(nth_tick_handlers) do
        log('Registering dispatcher for nth-tick: ' .. tostring(nth))
        script.on_nth_tick(nth, function(event)
            -- Call all registered handlers for this nth tick
            for _, handler in pairs(handlers) do
                handler(event)
            end
        end)
    end
end

local function register_actions()
    local actions = {}
    for name, module in pairs(loaded_modules) do
        if string.find(name, "tools") then
            if module.actions then
                local count = 0
                local total_actions = 0
                for _ in pairs(module.actions) do
                    total_actions = total_actions + 1
                end
                for action_name, action_function in pairs(module.actions) do
                    count = count + 1
                    local display_name = string.gsub(name, "^tools%.", "")
                    log(display_name .. ": registering action " .. count .. "/" .. total_actions .. ": " .. action_name)
                    actions[action_name] = action_function
                end
            end
        end
    end
    remote.add_interface("actions", actions)
end

register_actions()
register_events()

-- Force CRC check when a player joins the game
script.on_event(defines.events.on_player_joined_game, function(event)
    log("Player joined game: " .. tostring(event.player_index))
    game.force_crc()
    log("Forced CRC check due to player joining")
end)

script.on_load(function()
    log("Hii from on_load")
end)

script.on_init(function()
    log("Hii from on_init")
    initialise_modules()
end)


script.on_configuration_changed(function()
    log("on_configuration_changed: reinitializing modules and events")
    initialise_modules()
end)




