{
  "objective": "We need create an automated copper burner mine that mines copper ore to a chest further away from it with 2 burner mining drills. The final setup should be checked by looking if the chest has any copper ore in it.",
  "objective_gen_instructions": "Do not use electric mining drills or assembly machines. Generate setups with one and multiple(up to 2) mining drills that feeds into a different chest or a furnace (2 drills cannot feed into the same furnace or chest). The outputs need to be further away from the drills",
  "scenario_starting_inv": {},
  "objective_group": "create_burner_mines",
  "starting_scenario": "full_scratch",
  "inventory": {
    "iron-plate": 50,
    "coal": 100,
    "copper-plate": 50,
    "iron-chest": 5,
    "burner-mining-drill": 5,
    "electric-mining-drill": 1,
    "assembling-machine-1": 1,
    "stone-furnace": 9,
    "transport-belt": 500,
    "boiler": 1,
    "burner-inserter": 32,
    "pipe": 15,
    "steam-engine": 1,
    "small-electric-pole": 10,
    "wooden-chest": 5,
    "iron-ore": 20,
    "offshore-pump": 1
  },
  "implementation": "from factorio_instance import *\n\n\"\"\"\nWe need create an automated copper burner mine that mines copper ore to a chest further away from it with 2 burner mining drills. \nThe final setup should be checked by looking if the chest has any copper ore in it\n\"\"\"\n\n\n\"\"\"\nStep 1: Place the burner mining drills. We need to carry out the following substeps:\n- Move to a copper ore patch as the api requires to first move to the position where we want to place the entity\n- Place the burner mining drills on the copper ore patch\n- Add coal to fuel the burner mining drill\n\"\"\"\n\n# Find the nearest copper ore patch\ncopper_ore_position = get_resource_patch(Resource.CopperOre, nearest(Resource.CopperOre))\nprint(f\"Nearest copper ore found at: {copper_ore_position}\")\n\n# Move to the copper ore patch to place the burner mining drills\n# move to the center of the patch, the place where the drills will be placed\nmove_to(copper_ore_position.bounding_box.center)\nprint(f\"Moved to copper ore patch at: {copper_ore_position}\")\n\n# Place the first burner mining drill on the copper ore patch\n# place it at the center of the patch\ndrill = place_entity(Prototype.BurnerMiningDrill, direction=Direction.UP, position=copper_ore_position.bounding_box.center)\nprint(f\"Placed burner mining drill at: {drill.position}\")\n\n# Add coal to fuel the first burner mining drill\n# Also get a updated fueled_drill variable to refresh the drill variable with the updated fuel level\nfueled_drill = insert_item(Prototype.Coal, drill, quantity=20)\nprint(f\"Inserted {coal_inserted} coal into the burner mining drill\")\n\n# Verify that the drill is fueled\n# We use the updated fueled_drill variabe to check the fuel level\n# We also use the .fuel attribute to get the fuel inventory of the entity as the fuel does not end up in the normal inspect inventory\ncoal_in_drill = fueled_drill.fuel.get(Prototype.Coal, 0)\nassert coal_in_drill > 0, \"Failed to fuel drill\"\nprint(\"Burner mining drill successfully placed and fueled\")\n\n# Place the second burner mining drill on the copper ore patch\n# Place it diirectly next to the first drill\nsecond_drill = place_entity_next_to(Prototype.BurnerMiningDrill, direction=Direction.UP, reference_position=fueled_drill.position, spacing = 1)\nprint(f\"Placed burner mining drill at: {drill.position}\")\n\n# Add coal to fuel the second burner mining drill\n# Also get a updated fueled_drill variable to refresh the drill variable with the updated fuel level\nfueled_second_drill = insert_item(Prototype.Coal, second_drill, quantity=20)\nprint(f\"Inserted {coal_inserted} coal into the burner mining drill\")\n\n# Verify that the second_drill is fueled\n# We use the updated fueled_second_drill variabe to check the fuel level\n# We also use the .fuel attribute to get the fuel inventory of the entity as the fuel does not end up in the normal inspect inventory\ncoal_in_drill = fueled_second_drill.fuel.get(Prototype.Coal, 0)\nassert coal_in_drill > 0, \"Failed to fuel second drill\"\nprint(\"Burner mining drill successfully placed and fueled\")\n\n# Print the current inventory\ncurrent_inventory = inspect_inventory()\nprint(f\"Current inventory after placing and fueling the drill: {current_inventory}\")\n###SEP\n\n\"\"\"\nStep 2: Place the wooden chest. We need to carry out the following substeps:\n- Move to a position further away from the drill (at least 5 tiles away) as the api requires to first move to the position where we want to place the entity\n- Place the wooden chest at this position\n\"\"\"\n\n# Calculate a position 7 tiles to the right of the drill\ndrill_position = drill.position\nchest_position = Position(x=drill_position.x + 7, y=drill_position.y)\n\n# Move to the calculated position\n# We need to move to the position where we want to place the wooden chest\nprint(f\"Moving to position: {chest_position}\")\nmove_to(chest_position)\n\n# Place the wooden chest\nchest = place_entity(Prototype.WoodenChest, direction=Direction.UP, position=chest_position)\nprint(f\"Placed wooden chest at: {chest.position}\")\n\n# Print the current inventory\ncurrent_inventory = inspect_inventory()\nprint(f\"Current inventory after placing the wooden chest: {current_inventory}\")\n\n###SEP\n\"\"\"\nStep 3: Set up the burner inserter. First we need to place down the inserters and only then connect the drills to inserters. We need to carry out the following substeps:\n- Move next to the wooden chest\n- Place the burner inserter adjacent to the chest\n- Rotate the inserter so it will insert items into the chest\n- Add coal to fuel the burner inserter\n\"\"\"\n#Step Execution\n\n# Move next to the wooden chest\nmove_to(chest_position)\n\n# Place the burner inserter adjacent to the chest\ninserter = place_entity_next_to(Prototype.BurnerInserter, chest_position, direction=Direction.RIGHT) \nprint(f\"Placed burner inserter at: {inserter.position}\")\n\n# Rotate the inserter so it will insert items into the chest\n# By default, the inserter is oriented to pick up items from the chest\ninserter = rotate_entity(inserter, Direction.LEFT)\n\n# Add coal to fuel the burner inserter\n# We also update the inserter variable with the updated fuel level\ninserter_fueled = insert_item(Prototype.Coal, inserter, quantity=10)\nprint(f\"Inserted {coal_inserted} coal into the burner inserter\")\n\n# Verify that the inserter is fueled\n# We use the updated inserter_fueled variable to check the fuel level\ncoal_in_inserter = inserter_fueled.fuel.get(Prototype.Coal, 0)\nassert coal_in_inserter > 0, \"Failed to fuel inserter\"\n\n# Print the current inventory\ncurrent_inventory = inspect_inventory()\nprint(f\"Current inventory after setting up the burner inserter: {current_inventory}\")\n\n###SEP\n\"\"\"\nStep 4: Connect the drills to the chest inserter. We need to carry out the following substeps:\n- Use transport belts to connect the drop position of the burner mining drills to the pickup position of the burner inserter\n- Ensure the belt is properly aligned and connected\n\"\"\"\n#Step Execution\n\n# Connect the first drill's drop position to the inserter's pickup position with transport belts\nprint(\"Connecting drill to inserter with transport belts...\")\nfirst_belts = connect_entities(drill.drop_position, inserter.pickup_position, Prototype.TransportBelt)\nassert first_belts, \"Failed to connect first drill to chest inserter with transport belts\"\n\n# Connect the second drill's drop position to the inserter's pickup position with transport belts\nprint(\"Connecting drill to inserter with transport belts...\")\nsecond_belts = connect_entities(second_drill.drop_position, inserter.pickup_position, Prototype.TransportBelt)\nassert second_belts, \"Failed to connect second drill to chest inserter with transport belts\"\n\nprint(\"Successfully connected drills to inserter with transport belts\")\n\n###SEP\n\"\"\"\nStep 5: Verify the setup. We need to carry out the following substeps:\n- Wait for 30 seconds to allow the system to operate\n- Get the latest chest entity as the chest will have the updated inventory\n- Check the contents of the wooden chest for copper ore\n- If copper ore is present, the setup is working correctly\n##\n\"\"\"\n# Inventory at the start of step {'transport-belt': 91, 'burner-inserter': 4, 'burner-mining-drill': 2, 'stone-furnace': 9, 'coal': 4}\n#Step Execution\n\n# Wait for 30 seconds to allow the system to operate\nprint(\"Waiting for 30 seconds to allow the system to operate...\")\nsleep(30)\nprint(\"30 seconds have passed. Checking the setup now.\")\n\n# Move near the chest to inspect its contents\nmove_to(chest.position)\n\n\n# Check the contents of the wooden chest for copper ore\n# First we need to get the latest chest entity as the chest will have the updated inventory\nchest = get_entity(Prototype.WoodenChest, chest.position)\n\n# Next we inspect the inventory as the chest will always have everything in their inventory\nchest_inventory = inspect_inventory(chest)\ncopper_ore_count = chest_inventory.get(Prototype.CopperOre, 0)\nprint(f\"Copper ore in the wooden chest: {copper_ore_count}\")\nassert copper_ore_count > 0, \"No copper ore found in the wooden chest. Setup verification failed.\"\nprint(\"\\nSetup verification complete.\")\n",
  "starting_inventory": {
    "iron-plate": 50,
    "coal": 100,
    "copper-plate": 50,
    "iron-chest": 5,
    "burner-mining-drill": 5,
    "electric-mining-drill": 1,
    "assembling-machine-1": 1,
    "stone-furnace": 9,
    "transport-belt": 500,
    "boiler": 1,
    "burner-inserter": 32,
    "pipe": 15,
    "steam-engine": 1,
    "small-electric-pole": 10,
    "wooden-chest": 5,
    "iron-ore": 20,
    "offshore-pump": 1
  },
  "starting_snippet": "from factorio_instance import *\n"
}