name: Build and Deploy Leaderboard

on:
  push:
    branches:
      - main
    paths:
      - 'leaderboard/**'
      - '!leaderboard/results/**'
      - '!leaderboard/processed/**'
  repository_dispatch:
    types: [trigger-deploy-leaderboard]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches

      # Fetch the results branch for processed data
      - name: Fetch results branch
        run: |
          git fetch origin results:results

      - name: Copy processed results from results branch
        run: |
          mkdir -p leaderboard/processed
          git checkout results -- leaderboard/processed || echo "No processed results found"

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        working-directory: ./leaderboard
        run: npm install

      - name: Build
        working-directory: ./leaderboard
        run: npm run build

      - name: Create docs directory if it doesn't exist
        run: mkdir -p docs

      - name: Copy build to docs/leaderboard
        run: |
          mkdir -p docs/leaderboard
          cp -r leaderboard/build/* docs/leaderboard/
          mkdir -p docs/leaderboard/processed
          cp -r leaderboard/processed/* docs/leaderboard/processed/ || true

      - name: Commit and push with improved handling
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Stage all changes first
          git add docs/leaderboard
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit the changes
          git commit -m "Update leaderboard [skip ci]"
          
          # Try to push directly first
          if git push origin main; then
            echo "Successfully pushed changes on first attempt"
            exit 0
          fi
          
          echo "Direct push failed, trying fetch and merge approach"
          
          # Alternative approach: create a temporary branch
          git branch temp-branch
          git checkout main
          
          # Fetch latest changes from main
          git fetch origin main
          git reset --hard origin/main
          
          # Create and apply patch from our changes
          git checkout temp-branch
          git format-patch -1 HEAD -o /tmp/patches
          git checkout main
          
          # Apply the patch (our changes) on top of the updated main
          git am /tmp/patches/*
          
          # Push the result
          if git push origin main; then
            echo "Successfully pushed changes after merge"
            exit 0
          else
            echo "Failed to push changes even after merge"
            exit 1
          fi