-- control.lua
-- This file is automatically generated by the LuaModuleManager
-- Do not edit this file manually

util = require('util')
local module_names = {
    -- libs first
    'libs.initialise',
    'libs.alerts',
    'libs.recipe_fluid_connection_mappings',
    'libs.utils',
    'libs.serialize',
    'libs.checksum',
    'libs.connection_points',

    -- admin tools
    'tools.admin.load_research_state',
    'tools.admin.clear_collision_boxes',
    'tools.admin.regenerate_resources',
    'tools.admin.reset',
    'tools.admin.extend_collision_boxes',
    'tools.admin.load_blueprint',
    'tools.admin.save_blueprint',
    'tools.admin.render',
    'tools.admin.get_factory_centroid',
    'tools.admin.get_factory_centroid',
    'tools.admin.set_inventory',
    'tools.admin.clear_entities',
    'tools.admin.get_path',
    'tools.admin.save_research_state',
    'tools.admin.request_path',
    'tools.admin.render_message',
    'tools.admin.save_entity_state',
    'tools.admin.get_production_stats',
    'tools.admin.load_entity_state',

    -- agent tools
    'tools.agent.create_agent_characters',
    'tools.agent.inspect_inventory',
    'tools.agent.get_entity',
    'tools.agent.nearest',
    'tools.agent.harvest_resource',
    'tools.agent.craft_item',
    'tools.agent.place_entity_next_to',
    'tools.agent.sleep',
    'tools.agent.set_research',
    'tools.agent.get_research_progress',
    'tools.agent.rotate_entity',
    'tools.agent.send_message',
    'tools.agent.pickup_entity',
    'tools.agent.get_prototype_recipe',
    'tools.agent.print',
    'tools.agent.nearest_buildable',
    'tools.agent.score',
    'tools.agent.set_entity_recipe',
    'tools.agent.extract_item',
    'tools.agent.insert_item',
    'tools.agent.can_place_entity',
    'tools.agent.get_resource_patch',
    'tools.agent.connect_entities',
    'tools.agent.get_connection_amount',
    'tools.agent.get_entities',
    'tools.agent.move_to',
    'tools.agent.launch_rocket',
    'tools.agent.place_entity'
}

local loaded_modules = {}

-- Load all modules and store them
log("Loading modules")
for _, name in ipairs(module_names) do
    local ok, mod = pcall(require, name)
    if not ok then
        log("Error loading module: " .. name .. " - error: " .. mod)
    else
        log("Loaded module: " .. name .. " - success: " .. tostring(ok))
        loaded_modules[name] = mod  -- Store the actual module object
    end
end

local function initialize_all()
    log("Initializing all modules")
    for name, module in pairs(loaded_modules) do  -- Now iterating over actual modules
        log('Initializing module: ' .. name)
        if module.initialize then 
            local ok, err = pcall(module.initialize)
            if ok then
                log("Successfully initialized module: " .. name)
            else
                log("Error initializing module: " .. name .. " - error: " .. err)
            end
        end
    end
end


local function register_events()
    log("Registering events")
    for name, module in pairs(loaded_modules) do
        if module.events then
            for event_id, handler in pairs(module.events) do
                log('Registering event: ' .. tostring(event_id) .. ' from module: ' .. name)
                script.on_event(event_id, handler)
            end
        end
        if module.nth then
            for nth, handler in pairs(module.nth) do
                log('Registering nth-tick: ' .. tostring(nth) .. ' from module: ' .. name)
                script.on_nth_tick(nth, handler)
            end
        end
    end
end


-- One-shot first tick initializer (safe fallback for existing saves)
local function first_tick_init(event)
    -- Unregister ourselves immediately to avoid repeated runs
    script.on_nth_tick(1, nil)
    if not global.fle_initialized then
        log("Running delayed initialization on first tick via on_nth_tick(1)")
        initialize_all()
        register_events()
        global.fle_initialized = true
    end
    log("First tick initialization complete; on_nth_tick(1) handler removed")
end

script.on_load(function()
    log("Hii from on_load")
    -- Rebuild all event subscriptions (safe in on_load; does not mutate game state)
    register_events()

    -- If this save predates our init, schedule a deterministic one-shot init
    if not global.fle_initialized then
        log("Scheduling first-tick initialization via on_nth_tick(1)")
        script.on_nth_tick(1, first_tick_init)
    end
end)

script.on_init(function()
    log("Hii from on_init")
    initialize_all()
    register_events()

    -- Make all current players spectators
    for _, p in pairs(game.players) do
        if p and p.valid and not p.admin then
        p.set_controller{ type = defines.controllers.spectator }
        end
    end
    
    -- Keep enforcing spectator on join/create
    local function force_spec(e)
        local p = game.get_player(e.player_index)
        if p and p.valid and not p.admin then
        p.set_controller{ type = defines.controllers.spectator }
        end
    end
    script.on_event(defines.events.on_player_created, force_spec)
    script.on_event(defines.events.on_player_joined_game, force_spec)
    global.fle_initialized = true
end)

script.on_configuration_changed(function()
    log("Hii from on_configuration_changed")
    initialize_all()
    register_events()
    global.fle_initialized = true
end)