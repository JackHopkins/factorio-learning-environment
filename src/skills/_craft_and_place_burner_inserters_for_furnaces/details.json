{
  "objective": "Here's a new, single-task objective for the Factorio curriculum:\n\nCraft and place 3 burner inserters to automatically feed coal into furnaces.\n\nThis objective introduces the player to the concept of automated resource handling, which is a crucial aspect of Factorio gameplay. It's different from the previous examples as it focuses on creating a basic automation system for fuel management, rather than resource gathering, smelting, or item transportation. This task will help players understand how to reduce manual labor in their factory setup.",
  "steps": "To achieve the objective of crafting and placing 3 burner inserters to automatically feed coal into furnaces in Factorio, I would recommend the following step-by-step plan:\n\n1. Gather resources:\n   - Mine coal (at least 15 pieces)\n   - Mine iron ore (at least 9 pieces)\n\n2. Smelt iron ore:\n   - Place a stone furnace\n   - Add coal as fuel\n   - Insert iron ore to create iron plates (you'll need at least 9 iron plates)\n\n3. Craft burner inserters:\n   - Open the crafting menu\n   - Select the burner inserter recipe (each requires 1 iron gear wheel and 1 iron plate)\n   - Craft 3 iron gear wheels (each requires 2 iron plates)\n   - Craft 3 burner inserters\n\n4. Set up the automation system:\n   - Place 3 stone furnaces in a row with some space between them\n   - Place a burner inserter next to each furnace, positioned so that it can reach both the coal supply and the furnace's fuel input\n\n5. Arrange coal supply:\n   - Place a chest or create a small stockpile of coal within reach of each burner inserter\n\n6. Initialize the system:\n   - Manually add some coal to each burner inserter to get them started\n   - Add the material you want to smelt (e.g., iron ore or copper ore) to the furnaces\n\n7. Observe and maintain:\n   - Watch as the burner inserters automatically feed coal into the furnaces\n   - Ensure the coal supply is replenished as needed\n\nThis setup will demonstrate basic automation in Factorio, showing how burner inserters can be used to keep furnaces fueled without constant manual intervention. It serves as an introduction to more complex automation systems that will be built later in the game.",
  "corrections": [
    {
      "policy": "from factorio_instance import *\n\ndef craft_and_place_burner_inserters_for_furnaces(num_inserters: int = 3):\n    # Craft burner inserters\n    for _ in range(num_inserters):\n        # Craft iron gear wheel\n        craft_item(Prototype.IronGearWheel)\n        \n        # Craft burner inserter\n        craft_item(Prototype.BurnerInserter)\n\n    # Find the nearest stone furnace\n    furnace_position = nearest(Prototype.StoneFurnace)\n    \n    # Place burner inserters next to furnaces\n    for i in range(num_inserters):\n        # Calculate position for the next inserter\n        inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n        \n        # Place the burner inserter\n        inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n        \n        if not inserter:\n            print(f\"Failed to place burner inserter at {inserter_position}\")\n            return False\n\n        # Find nearest coal patch\n        coal_position = nearest(Resource.Coal)\n        \n        # Move to coal position\n        move_to(coal_position)\n        \n        # Harvest some coal\n        harvest_resource(coal_position, quantity=5)\n        \n        # Move back to the inserter\n        move_to(inserter_position)\n        \n        # Insert coal into the burner inserter\n        insert_item(Prototype.Coal, inserter, quantity=5)\n\n    print(f\"Successfully placed and fueled {num_inserters} burner inserters\")\n    return True\n",
      "error": "3: Error at lines 8-9: Could not craft a coal - \"global.actions.craft_item = function(player_i...\"]:77: Failed_to_craft_1x_coal because recipe doesnt exist"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        return False\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\nharvest_resource(coal_position, quantity=5 * num_inserters)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    # Insert coal into the burner inserter\n    insert_item(Prototype.Coal, get_entity(Prototype.BurnerInserter, inserter_position), quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\nreturn True\n",
      "error": "3: Error at lines 14-14: Could not find nearest stone-furnace"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft iron plates (1 required for each burner inserter)\n    craft_item(Prototype.IronPlate)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\n\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    return False\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        return False\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\n\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    return False\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\nharvest_resource(coal_position, quantity=5 * num_inserters)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        return False\n\n    # Insert coal into the burner inserter\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\nreturn True\n",
      "error": "2: Error at lines 5-14: Could not craft a iron-plate - \"global.actions.craft_item = function(player_i...\"]:77: Failed_to_craft_1x_iron-plate because missing ingredients: iron-ore x1"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    return False\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\nharvest_resource(iron_ore_position, quantity=10)  # Mine enough for 3 burner inserters and some extra\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    return False\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        return False\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    return False\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\nharvest_resource(coal_position, quantity=5 * num_inserters)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        return False\n\n    # Insert coal into the burner inserter\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\nreturn True\n",
      "error": "3: Error at lines 6-8: 'return' outside function (file, line 8)"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\nharvest_resource(iron_ore_position, quantity=10)  # Mine enough for 3 burner inserters and some extra\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\nharvest_resource(coal_position, quantity=5 * num_inserters)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")\n\n    # Insert coal into the burner inserter\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\n",
      "error": "4: ({'y': 18.5, 'x': -10.5}, -1723495078.3272257)\n5: Error at lines 12-12: ('Could not harvest.', '\"global.actions.harvest_resource2 = function(p...\"]:167: Could only harvest 4 at position (-11.5, 19.5)')"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\nfor _ in range(3):  # Try multiple times to ensure we get enough\n    harvest_resource(iron_ore_position, quantity=5)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\nfor _ in range(num_inserters):\n    harvest_resource(coal_position, quantity=5)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")\n\n    # Insert coal into the burner inserter\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\n",
      "error": "4: ({'y': 18.5, 'x': -10.5}, -1723495078.323711)\n5: Error at lines 12-13: ('Could not harvest.', '\"global.actions.harvest_resource2 = function(p...\"]:167: Could only harvest 4 at position (-11.5, 19.5)')"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\ntotal_iron_ore = 0\nwhile total_iron_ore < 15:  # We need at least 15 iron ore (5 for each inserter)\n    harvested = harvest_resource(iron_ore_position, quantity=5)\n    total_iron_ore += harvested\n    if harvested == 0:\n        print(\"Unable to harvest more iron ore. Moving to a new position.\")\n        new_position = nearest(Resource.IronOre)\n        if new_position == iron_ore_position:\n            raise Exception(\"No more iron ore available\")\n        iron_ore_position = new_position\n        move_to(iron_ore_position)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\ntotal_coal = 0\nwhile total_coal < num_inserters * 5:\n    harvested = harvest_resource(coal_position, quantity=5)\n    total_coal += harvested\n    if harvested == 0:\n        print(\"Unable to harvest more coal. Moving to a new position.\")\n        new_position = nearest(Resource.Coal)\n        if new_position == coal_position:\n            raise Exception(\"No more coal available\")\n        coal_position = new_position\n        move_to(coal_position)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")\n\n    # Insert coal into the burner inserter\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\n",
      "error": "4: ({'y': 18.5, 'x': -10.5}, -1723495078.322959)\n6: Error at lines 13-22: ('Could not harvest.', '\"global.actions.harvest_resource2 = function(p...\"]:167: Could only harvest 4 at position (-11.5, 19.5)')"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\ntotal_iron_ore = 0\nwhile total_iron_ore < 15:  # We need at least 15 iron ore (5 for each inserter)\n    harvested = harvest_resource(iron_ore_position, quantity=1)\n    total_iron_ore += harvested\n    if harvested == 0:\n        print(\"Unable to harvest more iron ore. Moving to a new position.\")\n        new_position = nearest(Resource.IronOre)\n        if new_position == iron_ore_position:\n            raise Exception(\"No more iron ore available\")\n        iron_ore_position = new_position\n        move_to(iron_ore_position)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\ntotal_coal = 0\nwhile total_coal < num_inserters * 5:\n    harvested = harvest_resource(coal_position, quantity=1)\n    total_coal += harvested\n    if harvested == 0:\n        print(\"Unable to harvest more coal. Moving to a new position.\")\n        new_position = nearest(Resource.Coal)\n        if new_position == coal_position:\n            raise Exception(\"No more coal available\")\n        coal_position = new_position\n        move_to(coal_position)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")\n\n    # Insert coal into the burner inserter\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\n",
      "error": "4: ({'y': 18.5, 'x': -10.5}, -1723495078.320699)\n6: Error at lines 13-22: unsupported operand type(s) for +=: 'int' and 'NoneType'"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\ntotal_iron_ore = 0\nwhile total_iron_ore < 15:  # We need at least 15 iron ore (5 for each inserter)\n    harvested = harvest_resource(iron_ore_position, quantity=1)\n    if harvested is None:\n        print(\"Error while harvesting iron ore.\")\n        raise Exception(\"Error while harvesting iron ore\")\n    total_iron_ore += harvested\n    if harvested == 0:\n        print(\"Unable to harvest more iron ore. Moving to a new position.\")\n        new_position = nearest(Resource.IronOre)\n        if new_position == iron_ore_position:\n            raise Exception(\"No more iron ore available\")\n        iron_ore_position = new_position\n        move_to(iron_ore_position)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\ntotal_coal = 0\nwhile total_coal < num_inserters * 5:\n    harvested = harvest_resource(coal_position, quantity=1)\n    if harvested is None:\n        print(\"Error while harvesting coal.\")\n        raise Exception(\"Error while harvesting coal\")\n    total_coal += harvested\n    if harvested == 0:\n        print(\"Unable to harvest more coal. Moving to a new position.\")\n        new_position = nearest(Resource.Coal)\n        if new_position == coal_position:\n            raise Exception(\"No more coal available\")\n        coal_position = new_position\n        move_to(coal_position)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")\n\n    # Insert coal into the burner inserter\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\n",
      "error": "4: ({'y': 18.5, 'x': -10.5}, -1723495078.3210115)\n6: Error at lines 13-25: Error while harvesting iron ore"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\ntotal_iron_ore = 0\nattempts = 0\nwhile total_iron_ore < 15 and attempts < 30:  # We need at least 15 iron ore (5 for each inserter)\n    try:\n        harvested = harvest_resource(iron_ore_position, quantity=1)\n        if harvested:\n            total_iron_ore += harvested\n        else:\n            attempts += 1\n    except Exception as e:\n        print(f\"Error while harvesting iron ore: {e}\")\n        attempts += 1\n\n    if attempts >= 5:\n        print(\"Unable to harvest more iron ore. Moving to a new position.\")\n        new_position = nearest(Resource.IronOre)\n        if new_position == iron_ore_position:\n            raise Exception(\"No more iron ore available\")\n        iron_ore_position = new_position\n        move_to(iron_ore_position)\n        attempts = 0\n\nif total_iron_ore < 15:\n    raise Exception(f\"Could not harvest enough iron ore. Only got {total_iron_ore}\")\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\ntotal_coal = 0\nattempts = 0\nwhile total_coal < num_inserters * 5 and attempts < 30:\n    try:\n        harvested = harvest_resource(coal_position, quantity=1)\n        if harvested:\n            total_coal += harvested\n        else:\n            attempts += 1\n    except Exception as e:\n        print(f\"Error while harvesting coal: {e}\")\n        attempts += 1\n\n    if attempts >= 5:\n        print(\"Unable to harvest more coal. Moving to a new position.\")\n        new_position = nearest(Resource.Coal)\n        if new_position == coal_position:\n            raise Exception(\"No more coal available\")\n        coal_position = new_position\n        move_to(coal_position)\n        attempts = 0\n\nif total_coal < num_inserters * 5:\n    raise Exception(f\"Could not harvest enough coal. Only got {total_coal}\")\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = ",
      "error": "invalid syntax (<unknown>, line 111)"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\ntotal_iron_ore = 0\nattempts = 0\nwhile total_iron_ore < 15 and attempts < 30:  # We need at least 15 iron ore (5 for each inserter)\n    harvested = harvest_resource(iron_ore_position, quantity=1)\n    if harvested:\n        total_iron_ore += harvested\n    else:\n        attempts += 1\n\n    if attempts >= 5:\n        print(\"Unable to harvest more iron ore. Moving to a new position.\")\n        new_position = nearest(Resource.IronOre)\n        if new_position == iron_ore_position:\n            raise Exception(\"No more iron ore available\")\n        iron_ore_position = new_position\n        move_to(iron_ore_position)\n        attempts = 0\n\nif total_iron_ore < 15:\n    raise Exception(f\"Could not harvest enough iron ore. Only got {total_iron_ore}\")\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\ntotal_coal = 0\nattempts = 0\nwhile total_coal < num_inserters * 5 and attempts < 30:\n    harvested = harvest_resource(coal_position, quantity=1)\n    if harvested:\n        total_coal += harvested\n    else:\n        attempts += 1\n\n    if attempts >= 5:\n        print(\"Unable to harvest more coal. Moving to a new position.\")\n        new_position = nearest(Resource.Coal)\n        if new_position == coal_position:\n            raise Exception(\"No more coal available\")\n        coal_position = new_position\n        move_to(coal_position)\n        attempts = 0\n\nif total_coal < num_inserters * 5:\n    raise Exception(f\"Could not harvest enough coal. Only got {total_coal}\")\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to find burner inserter at",
      "error": "EOL while scanning string literal (<unknown>, line 106)"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\ntotal_iron_ore = 0\nattempts = 0\nwhile total_iron_ore < 15 and attempts < 30:  # We need at least 15 iron ore (5 for each inserter)\n    harvested = harvest_resource(iron_ore_position, quantity=1)\n    if harvested:\n        total_iron_ore += harvested\n    else:\n        attempts += 1\n\n    if attempts >= 5:\n        print(\"Unable to harvest more iron ore. Moving to a new position.\")\n        new_position = nearest(Resource.IronOre)\n        if new_position == iron_ore_position:\n            raise Exception(\"No more iron ore available\")\n        iron_ore_position = new_position\n        move_to(iron_ore_position)\n        attempts = 0\n\nif total_iron_ore < 15:\n    raise Exception(f\"Could not harvest enough iron ore. Only got {total_iron_ore}\")\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\ntotal_coal = 0\nattempts = 0\nwhile total_coal < num_inserters * 5 and attempts < 30:\n    harvested = harvest_resource(coal_position, quantity=1)\n    if harvested:\n        total_coal += harvested\n    else:\n        attempts += 1\n\n    if attempts >= 5:\n        print(\"Unable to harvest more coal. Moving to a new position.\")\n        new_position = nearest(Resource.Coal)\n        if new_position == coal_position:\n            raise Exception(\"No more coal available\")\n        coal_position = new_position\n        move_to(coal_position)\n        attempts = 0\n\nif total_coal < num_inserters * 5:\n    raise Exception(f\"Could not harvest enough coal. Only got {total_coal}\")\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to find burner inserter at",
      "error": "EOL while scanning string literal (<unknown>, line 106)"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\n# Find the nearest iron ore patch\niron_ore_position = nearest(Resource.IronOre)\nif not iron_ore_position:\n    print(\"No iron ore found. Unable to craft burner inserters.\")\n    raise Exception(\"No iron ore found\")\n\n# Move to iron ore position and mine some iron ore\nmove_to(iron_ore_position)\ntotal_iron_ore = 0\nattempts = 0\nwhile total_iron_ore < 15 and attempts < 30:  # We need at least 15 iron ore (5 for each inserter)\n    harvested = harvest_resource(iron_ore_position, quantity=1)\n    if harvested:\n        total_iron_ore += harvested\n    else:\n        attempts += 1\n\n    if attempts >= 5:\n        print(\"Unable to harvest more iron ore. Moving to a new position.\")\n        new_position = nearest(Resource.IronOre)\n        if new_position == iron_ore_position:\n            raise Exception(\"No more iron ore available\")\n        iron_ore_position = new_position\n        move_to(iron_ore_position)\n        attempts = 0\n\nif total_iron_ore < 15:\n    raise Exception(f\"Could not harvest enough iron ore. Only got {total_iron_ore}\")\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    print(\"No stone furnace found. Please place a stone furnace first.\")\n    raise Exception(\"No stone furnace found\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    # Calculate position for the next inserter\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n\n    # Place the burner inserter\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n\n    if not inserter:\n        print(f\"Failed to place burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Find nearest coal patch\ncoal_position = nearest(Resource.Coal)\nif not coal_position:\n    print(\"No coal patch found. Unable to fuel inserters.\")\n    raise Exception(\"No coal patch found\")\n\n# Move to coal position\nmove_to(coal_position)\n\n# Harvest coal for all inserters\ntotal_coal = 0\nattempts = 0\nwhile total_coal < num_inserters * 5 and attempts < 30:\n    harvested = harvest_resource(coal_position, quantity=1)\n    if harvested:\n        total_coal += harvested\n    else:\n        attempts += 1\n\n    if attempts >= 5:\n        print(\"Unable to harvest more coal. Moving to a new position.\")\n        new_position = nearest(Resource.Coal)\n        if new_position == coal_position:\n            raise Exception(\"No more coal available\")\n        coal_position = new_position\n        move_to(coal_position)\n        attempts = 0\n\nif total_coal < num_inserters * 5:\n    raise Exception(f\"Could not harvest enough coal. Only got {total_coal}\")\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        print(f\"Failed to find burner inserter at {inserter_position}\")\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")",
      "error": "4: ({'y': 18.5, 'x': -10.5}, -1723495078.3184993)\n7: Error at lines 14-28: No more iron ore available"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\ndef harvest_resource_safely(resource_type, amount_needed):\n    total_harvested = 0\n    attempts = 0\n    while total_harvested < amount_needed and attempts < 50:\n        resource_position = nearest(resource_type)\n        if not resource_position:\n            raise Exception(f\"No {resource_type} found\")\n        move_to(resource_position)\n        for _ in range(10):  # Try to harvest up to 10 times at each position\n            harvested = harvest_resource(resource_position, quantity=1)\n            if harvested:\n                total_harvested += harvested\n                if total_harvested >= amount_needed:\n                    return total_harvested\n            else:\n                break  # Move to a new position if we can't harvest here\n        attempts += 1\n    raise Exception(f\"Could not harvest enough {resource_type}. Only got {total_harvested}\")\n\n# Harvest iron ore\niron_ore_needed = 15  # 5 for each inserter\nharvest_resource_safely(Resource.IronOre, iron_ore_needed)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    raise Exception(\"No stone furnace found. Please place a stone furnace first.\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n    if not inserter:\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Harvest coal\ncoal_needed = num_inserters * 5\nharvest_resource_safely(Resource.Coal, coal_needed)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\nreturn True\n",
      "error": "4: Error at lines 25-25: name 'nearest' is not defined"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\ndef harvest_resource_safely(resource_type, amount_needed):\n    total_harvested = 0\n    attempts = 0\n    while total_harvested < amount_needed and attempts < 50:\n        resource_position = nearest(resource_type)\n        if not resource_position:\n            raise Exception(f\"No {resource_type} found\")\n        move_to(resource_position)\n        for _ in range(10):  # Try to harvest up to 10 times at each position\n            harvested = harvest_resource(resource_position, quantity=1)\n            if harvested:\n                total_harvested += harvested\n                if total_harvested >= amount_needed:\n                    return total_harvested\n            else:\n                break  # Move to a new position if we can't harvest here\n        attempts += 1\n    raise Exception(f\"Could not harvest enough {resource_type}. Only got {total_harvested}\")\n\n# Harvest iron ore\niron_ore_needed = 15  # 5 for each inserter\nharvest_resource_safely(Resource.IronOre, iron_ore_needed)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    raise Exception(\"No stone furnace found. Please place a stone furnace first.\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n    if not inserter:\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Harvest coal\ncoal_needed = num_inserters * 5\nharvest_resource_safely(Resource.Coal, coal_needed)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\nreturn True\n",
      "error": "4: Error at lines 25-25: name 'nearest' is not defined"
    },
    {
      "policy": "from factorio_instance import *\nnum_inserters = 3\n\ndef harvest_resource_safely(resource_type, amount_needed):\n    total_harvested = 0\n    attempts = 0\n    while total_harvested < amount_needed and attempts < 50:\n        resource_position = nearest(resource_type)\n        if not resource_position:\n            raise Exception(f\"No {resource_type} found\")\n        move_to(resource_position)\n        for _ in range(10):  # Try to harvest up to 10 times at each position\n            harvested = harvest_resource(resource_position, quantity=1)\n            if harvested:\n                total_harvested += harvested\n                if total_harvested >= amount_needed:\n                    return total_harvested\n            else:\n                break  # Move to a new position if we can't harvest here\n        attempts += 1\n    raise Exception(f\"Could not harvest enough {resource_type}. Only got {total_harvested}\")\n\n# Harvest iron ore\niron_ore_needed = 15  # 5 for each inserter\nharvest_resource_safely(Resource.IronOre, iron_ore_needed)\n\n# Find the nearest stone furnace\nfurnace_position = nearest(Prototype.StoneFurnace)\nif not furnace_position:\n    raise Exception(\"No stone furnace found. Please place a stone furnace first.\")\n\n# Move to the furnace\nmove_to(furnace_position)\n\n# Craft iron plates\nfor _ in range(5):  # Craft 5 iron plates (3 for inserters, 2 extra for gear wheels)\n    craft_item(Prototype.IronPlate)\n\n# Craft burner inserters\nfor _ in range(num_inserters):\n    # Craft iron gear wheels (2 required for each burner inserter)\n    for _ in range(2):\n        craft_item(Prototype.IronGearWheel)\n    # Craft burner inserter\n    craft_item(Prototype.BurnerInserter)\n\n# Place burner inserters next to furnaces\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    inserter = place_entity(Prototype.BurnerInserter, Direction.DOWN, inserter_position)\n    if not inserter:\n        raise Exception(f\"Failed to place burner inserter at {inserter_position}\")\n\n# Harvest coal\ncoal_needed = num_inserters * 5\nharvest_resource_safely(Resource.Coal, coal_needed)\n\n# Fuel each inserter\nfor i in range(num_inserters):\n    inserter_position = Position(x=furnace_position.x, y=furnace_position.y - 1 - i)\n    move_to(inserter_position)\n    inserter = get_entity(Prototype.BurnerInserter, inserter_position)\n    if not inserter:\n        raise Exception(f\"Failed to find burner inserter at {inserter_position}\")\n    insert_item(Prototype.Coal, inserter, quantity=5)\n\nprint(f\"Successfully placed and fueled {num_inserters} burner inserters\")\nreturn True\n",
      "error": "4: Error at lines 25-25: name 'nearest' is not defined"
    }
  ],
  "token_count": 174022,
  "cost": 0.074013,
  "policy_passed": false
}